name: Build for ESP8266-ESP32

on:
  pull_request:
    branches: [ master ]
    paths:
      - src/**
      - examples/**
  workflow_dispatch:
    
jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        example: [examples/ACUnit, examples/AirQualitySensor/AirQualitySensor, examples/Blinds, examples/ContactSensor, examples/DimSwitch, examples/doorbell, examples/Fan, examples/GarageDoor, examples/Light/Light, examples/Lock/Lock, examples/Lock/Lock_with_feedback, examples/MotionSensor, examples/PowerSensor, examples/Relay/MultiRelays_advance, examples/Relay/Relay, examples/Speaker, examples/Switch/MultiSwitch_advance, examples/Switch/MultiSwitch_beginner, examples/Switch/MultiSwitch_intermediate, examples/Switch/Switch, examples/Thermostat, examples/TV]

    steps:

    - name: Step 1 - Checkout Repo
      uses: actions/checkout@v2
    - name: Step 2 - Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-
    - name: Step 3 - Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Step 4 - Set up Python
      uses: actions/setup-python@v2
    - name: Step 5 - Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    - name: Step 6 - Install library dependencies
      run: |
        pio lib --global install "bblanchon/ArduinoJson"
        pio lib --global install "links2004/WebSockets"
    - name: Step 7 - Run build test using PlatformIO
      run: pio ci --lib="." -b esp12e -b esp32dev
      env:
        PLATFORMIO_CI_SRC: ${{ matrix.example }}
